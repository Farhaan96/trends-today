import React, { useState, useEffect } from 'react';\nimport { \n  ChartBarIcon, \n  CurrencyDollarIcon,\n  UserGroupIcon,\n  ShoppingCartIcon,\n  EyeIcon,\n  TrendingUpIcon,\n  ArrowUpIcon,\n  ArrowDownIcon\n} from '@heroicons/react/24/outline';\n\ninterface RevenueMetrics {\n  affiliateRevenue: {\n    total: number;\n    clicks: number;\n    conversions: number;\n    conversionRate: number;\n    topProviders: Array<{\n      provider: string;\n      revenue: number;\n      clicks: number;\n    }>;\n  };\n  premiumRevenue: {\n    total: number;\n    subscriptions: number;\n    churn: number;\n    mrr: number;\n    newSignups: number;\n    cancellations: number;\n  };\n  adRevenue: {\n    total: number;\n    impressions: number;\n    clicks: number;\n    ctr: number;\n    rpm: number;\n  };\n  totalRevenue: number;\n  period: string;\n  lastUpdated: string;\n}\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  change?: number;\n  icon: React.ReactNode;\n  color: string;\n  subtitle?: string;\n}\n\nfunction MetricCard({ title, value, change, icon, color, subtitle }: MetricCardProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n          {subtitle && <p className=\"text-sm text-gray-500 mt-1\">{subtitle}</p>}\n        </div>\n        <div className={`p-3 rounded-full ${color}`}>\n          {icon}\n        </div>\n      </div>\n      {change !== undefined && (\n        <div className=\"mt-4 flex items-center\">\n          {change >= 0 ? (\n            <ArrowUpIcon className=\"w-4 h-4 text-green-600 mr-1\" />\n          ) : (\n            <ArrowDownIcon className=\"w-4 h-4 text-red-600 mr-1\" />\n          )}\n          <span className={`text-sm font-medium ${\n            change >= 0 ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {Math.abs(change)}% from last period\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface RevenueDashboardProps {\n  className?: string;\n  period?: '7d' | '30d' | '90d';\n}\n\nexport default function RevenueDashboard({ \n  className = '', \n  period = '30d' \n}: RevenueDashboardProps) {\n  const [metrics, setMetrics] = useState<RevenueMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState(period);\n\n  useEffect(() => {\n    fetchMetrics(selectedPeriod);\n  }, [selectedPeriod]);\n\n  const fetchMetrics = async (timePeriod: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/revenue-tracking?period=${timePeriod}&metric=all`);\n      const data = await response.json();\n      if (data.success) {\n        setMetrics(data.metrics);\n      }\n    } catch (error) {\n      console.error('Failed to fetch revenue metrics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-gray-50 rounded-lg p-8 ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 mt-2\">Loading revenue data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className={`bg-red-50 border border-red-200 rounded-lg p-6 ${className}`}>\n        <p className=\"text-red-700\">Failed to load revenue metrics. Please try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Revenue Dashboard</h2>\n          <p className=\"text-gray-600\">Performance metrics for Trends Today monetization</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <select\n            value={selectedPeriod}\n            onChange={(e) => setSelectedPeriod(e.target.value as '7d' | '30d' | '90d')}\n            className=\"border border-gray-300 rounded-lg px-3 py-2 text-sm\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <MetricCard\n          title=\"Total Revenue\"\n          value={formatCurrency(metrics.totalRevenue)}\n          change={12.3}\n          icon={<CurrencyDollarIcon className=\"w-6 h-6 text-white\" />}\n          color=\"bg-green-500\"\n        />\n        \n        <MetricCard\n          title=\"Affiliate Revenue\"\n          value={formatCurrency(metrics.affiliateRevenue.total)}\n          change={8.7}\n          icon={<ShoppingCartIcon className=\"w-6 h-6 text-white\" />}\n          color=\"bg-blue-500\"\n          subtitle={`${metrics.affiliateRevenue.conversions} conversions`}\n        />\n        \n        <MetricCard\n          title=\"Premium Subscriptions\"\n          value={formatCurrency(metrics.premiumRevenue.total)}\n          change={-2.1}\n          icon={<UserGroupIcon className=\"w-6 h-6 text-white\" />}\n          color=\"bg-purple-500\"\n          subtitle={`${metrics.premiumRevenue.subscriptions} active subs`}\n        />\n        \n        <MetricCard\n          title=\"Ad Revenue\"\n          value={formatCurrency(metrics.adRevenue.total)}\n          change={15.4}\n          icon={<EyeIcon className=\"w-6 h-6 text-white\" />}\n          color=\"bg-orange-500\"\n          subtitle={`${formatNumber(metrics.adRevenue.impressions)} impressions`}\n        />\n      </div>\n\n      {/* Detailed Metrics */}\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Affiliate Performance */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Affiliate Performance</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Conversion Rate</span>\n              <span className=\"font-medium\">{metrics.affiliateRevenue.conversionRate}%</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Total Clicks</span>\n              <span className=\"font-medium\">{formatNumber(metrics.affiliateRevenue.clicks)}</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Conversions</span>\n              <span className=\"font-medium\">{formatNumber(metrics.affiliateRevenue.conversions)}</span>\n            </div>\n          </div>\n          \n          <div className=\"mt-6\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Top Performing Partners</h4>\n            <div className=\"space-y-2\">\n              {metrics.affiliateRevenue.topProviders.map((provider, index) => (\n                <div key={provider.provider} className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <div className={`w-2 h-2 rounded-full mr-3 ${\n                      index === 0 ? 'bg-green-500' : \n                      index === 1 ? 'bg-blue-500' : 'bg-gray-400'\n                    }`}></div>\n                    <span className=\"text-sm capitalize\">{provider.provider}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">{formatCurrency(provider.revenue)}</div>\n                    <div className=\"text-xs text-gray-500\">{formatNumber(provider.clicks)} clicks</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Premium Subscriptions */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Premium Subscriptions</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Monthly Recurring Revenue</span>\n              <span className=\"font-medium\">{formatCurrency(metrics.premiumRevenue.mrr)}</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Churn Rate</span>\n              <span className={`font-medium ${\n                metrics.premiumRevenue.churn > 5 ? 'text-red-600' : 'text-green-600'\n              }`}>\n                {metrics.premiumRevenue.churn}%\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">New Signups</span>\n              <span className=\"font-medium text-green-600\">+{metrics.premiumRevenue.newSignups}</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Cancellations</span>\n              <span className=\"font-medium text-red-600\">-{metrics.premiumRevenue.cancellations}</span>\n            </div>\n          </div>\n          \n          {/* Subscription Growth Chart Placeholder */}\n          <div className=\"mt-6\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Growth Trend</h4>\n            <div className=\"bg-gray-50 rounded p-4 text-center text-gray-500\">\n              <TrendingUpIcon className=\"w-8 h-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">Subscription growth chart</p>\n              <p className=\"text-xs\">(Coming soon)</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Stats */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Ad Performance</h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatNumber(metrics.adRevenue.impressions)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Impressions</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatNumber(metrics.adRevenue.clicks)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Clicks</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {metrics.adRevenue.ctr.toFixed(2)}%\n            </div>\n            <div className=\"text-sm text-gray-600\">CTR</div>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              ${metrics.adRevenue.rpm.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-600\">RPM</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Last Updated */}\n      <div className=\"text-center text-sm text-gray-500\">\n        Last updated: {new Date(metrics.lastUpdated).toLocaleString()}\n      </div>\n    </div>\n  );\n}"